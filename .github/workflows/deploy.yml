# .github/workflows/deploy.yml
name: Deploy to GitHub Pages

on:
  # 监听 push 到 main 分支的事件
  push:
    branches: ["main"]
  # 允许你从 GitHub Actions 页面手动触发此工作流
  workflow_dispatch:

# 设置 GITHUB_TOKEN 的权限，允许部署到 GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# 只允许同时运行一个部署，跳过正在运行和最新排队的运行
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # 构建任务
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # 获取所有 Git 历史记录，这对于某些 Astro 功能可能很重要
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20" # 使用 Node.js 20，这是目前的 LTS 版本，通常兼容性好
          cache: "npm"        # 缓存 node_modules 以加快安装速度

      - name: Setup Pages
        # 这个官方 Action 会配置一些环境变量，为部署到 GitHub Pages 做准备
        uses: actions/configure-pages@v5

      - name: Install dependencies
        # 使用 npm ci 确保依赖版本与 package-lock.json 严格一致
        run: npm ci

      - name: Build with Starlight
        run: |
          npm run build
          # GitHub Pages 默认会处理下划线开头的文件/文件夹，但添加 .nojekyll 文件可以确保万无一失
          touch dist/.nojekyll

      - name: Upload artifact
        # 将构建好的 dist 目录上传为一个 artifact，供下一个部署任务使用
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./dist

  # 部署任务
  deploy:
    environment:
      name: github-pages
      # 部署完成后，这个 URL 会指向你的网站
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build # 此任务需要等待 build 任务成功完成
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        # 使用官方的部署 Action 将 artifact 部署到 GitHub Pages
        uses: actions/deploy-pages@v4
